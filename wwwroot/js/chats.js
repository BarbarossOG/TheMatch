document.addEventListener('DOMContentLoaded', function() {
    const dialogsList = document.getElementById('chatDialogsList');
    const messagesBlock = document.getElementById('chatMessagesBlock');
    const sendForm = document.getElementById('chatSendForm');
    const messageInput = document.getElementById('chatMessageInput');
    const actionsBlock = document.getElementById('chatActions');
    const btnDate = document.getElementById('btnDate');
    const btnBlock = document.getElementById('btnBlock');
    let currentDialogId = null;
    let pollInterval = null;
    let myId = null;

    // --- –ü–æ–ª—É—á–µ–Ω–∏–µ userId –∏–∑ query string ---
    function getQueryParam(name) {
        const url = new URL(window.location.href);
        return url.searchParams.get(name);
    }
    const initialUserId = getQueryParam('userId') ? +getQueryParam('userId') : null;

    // --- –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id (–µ—Å–ª–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–∏–∞–ª–æ–≥–æ–≤) ---
    function fetchUserById(userId) {
        return fetch(`/api/chatapi/userinfo/${userId}`)
            .then(r => r.json());
    }

    // –ü–æ–ª—É—á–∞–µ–º id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç
    fetch('/api/chatapi/myid')
        .then(r => r.json())
        .then(data => {
            myId = data.id;
            loadDialogs();
            setInterval(loadDialogs, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã
        });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
    function loadDialogs() {
        fetch('/api/chatapi/dialogs')
            .then(r => r.json())
            .then(async arr => {
                // –ï—Å–ª–∏ –µ—Å—Ç—å initialUserId –∏ –µ–≥–æ –Ω–µ—Ç –≤ arr, –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (initialUserId && !arr.some(u => u.id–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è === initialUserId)) {
                    try {
                        const u = await fetchUserById(initialUserId);
                        if (u && u.–∏–º—è) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                            arr.push({
                                id–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: u.id,
                                –∏–º—è: u.–∏–º—è,
                                —Ñ–æ—Ç–æ: u.—Ñ–æ—Ç–æ
                            });
                        }
                    } catch {}
                }
                if (!arr.length) {
                    dialogsList.innerHTML = '<div style="color:#b39ddb;padding:32px 0;text-align:center;">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–æ–∫</div>';
                    return;
                }
                dialogsList.innerHTML = arr.map(u => `
                    <div class="chat-dialog-item${u.id–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è===currentDialogId?' active':''}" data-id="${u.id–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}">
                        <img src="${u.—Ñ–æ—Ç–æ||'/images/avatars/standart.jpg'}" class="avatar" alt="">
                        <span class="name">${u.–∏–º—è}</span>
                        <span class="dialog-actions${u.id–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è===currentDialogId?'':' d-none'}">
                            <button class="btn-dialog btn-dialog-date" title="–í—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è" data-action="date">‚ù§</button>
                            <button class="btn-dialog btn-dialog-block" title="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" data-action="block">üö´</button>
                        </span>
                    </div>
                `).join('');
                // –ï—Å–ª–∏ initialUserId –µ—Å—Ç—å, —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥
                if (initialUserId && currentDialogId !== initialUserId) {
                    const item = dialogsList.querySelector(`.chat-dialog-item[data-id='${initialUserId}']`);
                    if (item) {
                        item.click();
                    } else {
                        // –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
                        currentDialogId = initialUserId;
                        sendForm.classList.remove('d-none');
                        loadMessages(currentDialogId);
                        if (pollInterval) clearInterval(pollInterval);
                        pollInterval = setInterval(() => loadMessages(currentDialogId, false), 4000);
                    }
                }
            });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    function loadMessages(dialogId, scrollToBottom = true) {
        fetch(`/api/chatapi/messages/${dialogId}`)
            .then(r => r.json())
            .then(arr => {
                console.log('myId:', myId, arr.map(m => [m.id–°–æ–æ–±—â–µ–Ω–∏—è, m.id–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, m.–ø—Ä–æ—á–∏—Ç–∞–Ω–æ]));
                if (!arr.length) {
                    messagesBlock.innerHTML = '<div class="chat-placeholder">–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–º!</div>';
                } else {
                    messagesBlock.innerHTML = arr.map(m => `
                        <div class="chat-message ${m.id–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è===myId?'sent':'received'}${m.–ø—Ä–æ—á–∏—Ç–∞–Ω–æ ? ' read' : ''}">
                            <div class="text">${escapeHtml(m.—Ç–µ–∫—Å—Ç)}</div>
                            <div class="date">${formatDate(m.–¥–∞—Ç–∞–û—Ç–ø—Ä–∞–≤–∫–∏)}${m.id–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è===myId && m.–ø—Ä–æ—á–∏—Ç–∞–Ω–æ ? ' <span style=\"color:#888;font-size:0.95em;vertical-align:middle;\">&#10003;&#10003;</span>' : ''}</div>
                        </div>
                    `).join('');
                }
                if (scrollToBottom) messagesBlock.scrollTop = messagesBlock.scrollHeight;
            });
    }

    // –í—ã–±–æ—Ä –¥–∏–∞–ª–æ–≥–∞
    dialogsList.addEventListener('click', function(e) {
        const item = e.target.closest('.chat-dialog-item');
        if (!item) return;
        const id = +item.dataset.id;
        if (id === currentDialogId) return;
        currentDialogId = id;
        document.querySelectorAll('.chat-dialog-item').forEach(el => el.classList.remove('active'));
        item.classList.add('active');
        sendForm.classList.remove('d-none');
        loadMessages(currentDialogId);
        if (pollInterval) clearInterval(pollInterval);
        pollInterval = setInterval(() => loadMessages(currentDialogId, false), 4000);
        // –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        fetch(`/api/chatapi/read/${currentDialogId}`, {method:'POST'}).then(()=>{
            loadMessages(currentDialogId, false);
        });
        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        document.querySelectorAll('.dialog-actions').forEach(el => el.classList.add('d-none'));
        const actions = item.querySelector('.dialog-actions');
        if (actions) actions.classList.remove('d-none');
    });

    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –¥–∏–∞–ª–æ–≥–µ
    dialogsList.addEventListener('click', function(e) {
        const btn = e.target.closest('.btn-dialog');
        if (!btn) return;
        const item = btn.closest('.chat-dialog-item');
        if (!item) return;
        const dialogId = +item.dataset.id;
        if (btn.dataset.action === 'date') {
            btn.disabled = true;
            fetch('/api/chatapi/date', {
                method: 'POST',
                headers: {'Content-Type':'application/json'},
                body: JSON.stringify(dialogId)
            })
            .then(r => r.json())
            .then(data => {
                if (data.mutual) {
                    alert('–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è! –¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –∏ –ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
                } else {
                    alert('–í—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è. –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!');
                }
            })
            .finally(()=>{ btn.disabled = false; });
        }
        if (btn.dataset.action === 'block') {
            if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É?')) return;
            btn.disabled = true;
            fetch('/api/chatapi/block', {
                method: 'POST',
                headers: {'Content-Type':'application/json'},
                body: JSON.stringify(dialogId)
            })
            .then(r => {
                if (r.ok) {
                    alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞.');
                    // –£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞
                    item.remove();
                    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —á–∞—Ç
                    if (dialogId === currentDialogId) {
                        sendForm.classList.add('d-none');
                        messagesBlock.innerHTML = '<div class="chat-placeholder">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</div>';
                        currentDialogId = null;
                    }
                }
            })
            .finally(()=>{ btn.disabled = false; });
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    sendForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const text = messageInput.value.trim();
        if (!text || !currentDialogId) return;
        fetch('/api/chatapi/send', {
            method: 'POST',
            headers: {'Content-Type':'application/json'},
            body: JSON.stringify({Id–ü–æ–ª—É—á–∞—Ç–µ–ª—è: currentDialogId, –¢–µ–∫—Å—Ç: text})
        })
        .then(r => {
            if (r.ok) {
                messageInput.value = '';
                setTimeout(() => loadMessages(currentDialogId), 300); // –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                loadDialogs(); // –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
            }
        });
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function escapeHtml(str) {
        return str.replace(/[&<>"']/g, function(tag) {
            const chars = {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'};
            return chars[tag]||tag;
        });
    }
    function formatDate(dateStr) {
        const d = new Date(dateStr);
        return d.toLocaleString('ru-RU', {day:'2-digit', month:'2-digit', hour:'2-digit', minute:'2-digit'});
    }
}); 